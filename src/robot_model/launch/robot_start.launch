<launch>
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="worlds/mud.world"/> Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
        <arg name="paused" value="false"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="true"/>
        <arg name="recording" value="false"/>
        <arg name="debug" value="false"/>
    </include>

    <param name="robot_description" command="$(find xacro)/xacro  $(find robot_model)/urdf/turtlebot3_burger.urdf.xacro" />
    <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf"  args="-urdf -R 0.0 -P 0 -Y 0  -model turtlebot3_burger -param robot_description" />
    
    <!-- Convert an xacro and put on parameter server -->
    <!-- <param name="robot_description" command="$(find xacro)/xacro $(find robot_model)/urdf/turtlebot3_burger.urdf.xacro" /> -->

    <!-- Spawn a robot into Gazebo -->
    <!-- <node name="spawn_urdf_model" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model turtlebot3_burger" /> -->

      <!-- Load joint controller configurations from YAML file to parameter server -->
    <!-- <rosparam file="$(find robot_model)/config/drive_param.yaml" command="load"/> -->

    <!-- <! load the controllers -->
    <!-- <node name="controller_manager_turtlebot" pkg="controller_manager" type="spawner" respawn="false" -->
        <!-- output="screen" ns="/turtlebot3_burger" args="turtlebot_controller" />  -->
    
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
        
    

</launch>





